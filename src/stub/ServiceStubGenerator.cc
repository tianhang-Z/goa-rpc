#include "stub/ServiceStubGenerator.hpp"

using namespace goa::rpc;

namespace {
std::string serviceStubTemplate(const std::string& macroName,
                                const std::string& userClassName,
                                const std::string& stubClassName,
                                const std::string& serviceName,
                                const std::string& stubProcedureBindings,
                                const std::string& stubProcedureDefinitions) {
  std::string str =
      R"(
/*
 * This stub is generated by goa-rpc, DO NOT modify it!
 */

#pragma once

#include <goa-json/include/Value.hpp>

#include "server/RpcServer.hpp"
#include "server/RpcService.hpp"
#include "utils/utils.hpp"

class [userClassName];

namespace goa {

namespace rpc {

template <typename S>
class [stubClassName]: noncopyable
{
protected:
    explicit [stubClassName](RpcServer& server) {
        static_assert(std::is_same_v<S, [userClassName]>,
                      "derived class name should be '[userClassName]'");

        auto service = new RpcService;

        [stubProcedureBindings]

        server.addService("[serviceName]", service);
    }

    ~[stubClassName]() = default;

private:
    [stubProcedureDefinitions]

private:
    S& convert() {
        return static_cast<S&>(*this);
    }
};

}

}

)";

  replaceAll(str, "[macroName]", macroName);
  replaceAll(str, "[userClassName]", userClassName);
  replaceAll(str, "[stubClassName]", stubClassName);
  replaceAll(str, "[serviceName]", serviceName);
  replaceAll(str, "[stubProcedureBindings]", stubProcedureBindings);
  replaceAll(str, "[stubProcedureDefinitions]", stubProcedureDefinitions);
  return str;
}

std::string stubProcedureBindTemplate(const std::string& procedureName,
                                      const std::string& stubClassName,
                                      const std::string& stubProcedureName,
                                      const std::string& procedureParams) {
  std::string str =
      R"(
service->addProcedureReturn("[procedureName]", new ProcedureReturn(
        std::bind(&[stubClassName]::[stubProcedureName], this, _1, _2)
        [procedureParams]
));
)";

  replaceAll(str, "[procedureName]", procedureName);
  replaceAll(str, "[stubClassName]", stubClassName);
  replaceAll(str, "[stubProcedureName]", stubProcedureName);
  replaceAll(str, "[procedureParams]", procedureParams);
  return str;
}

std::string stubNotifyBindTemplate(const std::string& notifyName,
                                   const std::string& stubClassName,
                                   const std::string& stubNotifyName,
                                   const std::string& notifyParams) {
  std::string str =
      R"(
service->addProcedureNotify("[notifyName]", new ProcedureNotify(
        std::bind(&[stubClassName]::[stubNotifyName], this, _1)
        [notifyParams]
));
)";

  replaceAll(str, "[notifyName]", notifyName);
  replaceAll(str, "[stubClassName]", stubClassName);
  replaceAll(str, "[stubNotifyName]", stubNotifyName);
  replaceAll(str, "[notifyParams]", notifyParams);
  return str;
}

std::string stubProcedureDefineTemplate(const std::string& paramsFromJsonArray,
                                        const std::string& paramsFromJsonObject,
                                        const std::string& stubProcedureName,
                                        const std::string& procedureName,
                                        const std::string& procedureArgs) {
  std::string str =
      R"(void [stubProcedureName](json::Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.isArray()) {
        [paramsFromJsonArray]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    }
    else {
        [paramsFromJsonObject]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    }
})";

  replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
  replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
  replaceAll(str, "[stubProcedureName]", stubProcedureName);
  replaceAll(str, "[procedureName]", procedureName);
  replaceAll(str, "[procedureArgs]", procedureArgs);
  return str;
}

std::string stubProcedureDefineTemplate(const std::string& stubProcedureName,
                                        const std::string& procedureName) {
  std::string str =
      R"(
void [stubProcedureName](json::Value& request, const RpcDoneCallback& done) {
    convert().[procedureName](UserDoneCallback(request, done));
}
)";

  replaceAll(str, "[stubProcedureName]", stubProcedureName);
  replaceAll(str, "[procedureName]", procedureName);
  return str;
}

std::string stubNotifyDefineTemplate(const std::string& paramsFromJsonArray,
                                     const std::string& paramsFromJsonObject,
                                     const std::string& stubNotifyName,
                                     const std::string& notifyName,
                                     const std::string& notifyArgs) {
  std::string str =
      R"(
void [stubNotifyName](json::Value& request)
{
    auto& params = request["params"];

    if (params.isArray()) {
        [paramsFromJsonArray]
        convert().[NotifyName]([notifyArgs]);
    }
    else {
        [paramsFromJsonObject]
        convert().[NotifyName]([notifyArgs]);
    }
}
)";

  replaceAll(str, "[notifyName]", notifyName);
  replaceAll(str, "[stubNotifyName]", stubNotifyName);
  replaceAll(str, "[notifyArgs]", notifyArgs);
  replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
  replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
  return str;
}

std::string stubNotifyDefineTemplate(const std::string& stubNotifyName,
                                     const std::string& notifyName) {
  std::string str =
      R"(
void [stubNotifyName](json::Value& request) {
    convert().[notifyName]();
}
)";

  replaceAll(str, "[stubNotifyName]", stubNotifyName);
  replaceAll(str, "[notifyName]", notifyName);
  return str;
}

std::string argsDefineTemplate(const std::string& arg, const std::string& index,
                               goa::json::ValueType type) {
  std::string str = R"(auto [arg] = params[[index]][method];)";
  std::string method = [=]() {
    switch (type) {
      case goa::json::ValueType::TYPE_BOOL:
        return ".getBool()";
      case goa::json::ValueType::TYPE_INT32:
        return ".getInt32()";
      case goa::json::ValueType::TYPE_INT64:
        return ".getInt64()";
      case goa::json::ValueType::TYPE_DOUBLE:
        return ".getDouble()";
      case goa::json::ValueType::TYPE_STRING:
        return ".getString()";
      case goa::json::ValueType::TYPE_OBJECT:
      case goa::json::ValueType::TYPE_ARRAY:
        return "";  // todo
      default:
        assert(false && "bad value type");
        return "bad type";
    }
  }();
  replaceAll(str, "[arg]", arg);
  replaceAll(str, "[index]", index);
  replaceAll(str, "[method]", method);
  return str;
}

}  // anonymous namespace

std::string ServiceStubGenerator::genStub() {
  auto macroName = genMacroName();
  auto userClassName = genUserClassName();
  auto stubClassName = genStubClassName();
  auto& serviceName = serviceInfo_.name_;

  auto bindings = genStubProcedureBindings();
  bindings.append(genStubNotifyBindings());

  auto definitions = genStubProcedureDefinitions();
  definitions.append(genStubNotifyDefinitions());

  return serviceStubTemplate(macroName, userClassName, stubClassName,
                             serviceName, bindings, definitions);
}

std::string ServiceStubGenerator::genMacroName() {
  std::string result = serviceInfo_.name_;
  for (char& c : result) {
    c = static_cast<char>(toupper(c));
  }
  return result.append("SERVICESTUB");
}

std::string ServiceStubGenerator::genUserClassName() {
  return serviceInfo_.name_ + "Service";
}

std::string ServiceStubGenerator::genStubClassName() {
  return serviceInfo_.name_ + "ServiceStub";
}

std::string ServiceStubGenerator::genStubProcedureBindings() {
  std::string result;
  for (auto& p : serviceInfo_.rpcReturn_) {
    auto procedureName = p.name_;
    auto stubClassName = genStubClassName();
    auto stubProcedureName = genStubGenericName(p);
    auto procedureParams = genGenericParams(p);

    auto binding = stubProcedureBindTemplate(
        procedureName, stubClassName, stubProcedureName, procedureParams);
    result.append(binding);
    result.append("\n");
  }
  return result;
}

std::string ServiceStubGenerator::genStubProcedureDefinitions() {
  std::string result;
  for (auto& r : serviceInfo_.rpcReturn_) {
    auto procedureName = r.name_;
    auto stubProcedureName = genStubGenericName(r);

    if (r.params_.getSize() > 0) {
      auto paramsFromJsonArray = genParamsFromJsonArray(r);
      auto paramsFromJsonObject = genParamsFromJsonObject(r);
      auto procedureArgs = genGenericArgs(r);
      auto define = stubProcedureDefineTemplate(
          paramsFromJsonArray, paramsFromJsonObject, stubProcedureName,
          procedureName, procedureArgs);

      result.append(define);
      result.append("\n");
    } else {
      auto define =
          stubProcedureDefineTemplate(stubProcedureName, procedureName);

      result.append(define);
      result.append("\n");
    }
  }
  return result;
}

std::string ServiceStubGenerator::genStubNotifyBindings() {
  std::string result;
  for (auto& p : serviceInfo_.rpcNotify_) {
    auto notifyName = p.name_;
    auto stubClassName = genStubClassName();
    auto stubNotifyName = genStubGenericName(p);
    auto notifyParams = genGenericParams(p);

    auto binding = stubNotifyBindTemplate(notifyName, stubClassName,
                                          stubNotifyName, notifyParams);
    result.append(binding);
    result.append("\n");
  }
  return result;
}

std::string ServiceStubGenerator::genStubNotifyDefinitions() {
  std::string result;
  for (auto& r : serviceInfo_.rpcNotify_) {
    auto notifyName = r.name_;
    auto stubNotifyName = genStubGenericName(r);

    if (r.params_.getSize() > 0) {
      auto paramsFromJsonArray = genParamsFromJsonArray(r);
      auto paramsFromJsonObject = genParamsFromJsonObject(r);
      auto notifyArgs = genGenericArgs(r);
      auto define =
          stubNotifyDefineTemplate(paramsFromJsonArray, paramsFromJsonObject,
                                   stubNotifyName, notifyName, notifyArgs);

      result.append(define);
      result.append("\n");
    } else {
      auto define = stubNotifyDefineTemplate(stubNotifyName, notifyName);

      result.append(define);
      result.append("\n");
    }
  }
  return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genStubGenericName(const Rpc& r) {
  return r.name_ + "Stub";
}

// 生成的格式： "keyName",ValueType 多行表示
template <typename Rpc>
std::string ServiceStubGenerator::genGenericParams(const Rpc& r) {
  std::string result;

  for (
      auto& m :
      r.params_
          .getObject()) {  // Object存储的是Member对象，即Value类型的kv对，对kv对进行遍历
    std::string field = "\"" + m.key.getString() + "\"";
    std::string type = [&]() {
      switch (m.value.getType()) {
        case goa::json::ValueType::TYPE_BOOL:
          return "goa::json::ValueType::TYPE_BOOL";
        case goa::json::ValueType::TYPE_INT32:
          return "goa::json::ValueType::TYPE_INT32";
        case goa::json::ValueType::TYPE_INT64:
          return "goa::json::ValueType::TYPE_INT64";
        case goa::json::ValueType::TYPE_DOUBLE:
          return "goa::json::ValueType::TYPE_DOUBLE";
        case goa::json::ValueType::TYPE_STRING:
          return "goa::json::ValueType::TYPE_STRING";
        case goa::json::ValueType::TYPE_OBJECT:
          return "goa::json::ValueType::TYPE_OBJECT";
        case goa::json::ValueType::TYPE_ARRAY:
          return "goa::json::ValueType::TYPE_ARRAY";
        default:
          assert(false && "bad value type");
          return "bad type";
      };
    }();
    result.append(", \n").append(field);
    result.append(", ").append(type);
  }
  return result;
}

// 生成的格式： argsName1, argsName2, ...
template <typename Rpc>
std::string ServiceStubGenerator::genGenericArgs(const Rpc& r) {
  std::string result;
  for (auto& m : r.params_.getObject()) {
    auto arg = m.key.getString();
    result.append(arg);
    result.append(", ");
  }
  return result;
}

// 生成代码： auto paramName = param[index].getXXX(); XXX为对应的ValueType
template <typename Rpc>
std::string ServiceStubGenerator::genParamsFromJsonArray(const Rpc& r) {
  std::string result;
  int index = 0;
  for (auto& m : r.params_.getObject()) {
    std::string line = argsDefineTemplate(
        m.key.getString(), std::to_string(index), m.value.getType());
    index++;
    result.append(line);
    result.append("\n");
  }
  return result;
}

// 生成代码： auto keyName = params["keyName"].getXXX(); .getXXX()为相应的类型
template <typename Rpc>
std::string ServiceStubGenerator::genParamsFromJsonObject(const Rpc& r) {
  std::string result;
  for (auto& m : r.params_.getObject()) {
    std::string index = "\"" + m.key.getString() + "\"";
    std::string line =
        argsDefineTemplate(m.key.getString(), index, m.value.getType());
    result.append(line);
    result.append("\n");
  }
  return result;
}